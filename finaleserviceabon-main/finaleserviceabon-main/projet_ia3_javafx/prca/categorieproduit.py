from flask import Flask, request, jsonify
import joblib
import numpy as np

app = Flask(__name__)

# üìå Charger le mod√®le et le vectorizer
try:
    model = joblib.load("produit_categorie_model.pkl")

    # V√©rifier si le mod√®le est un pipeline contenant 'tfidf'
    if hasattr(model, "named_steps") and "tfidf" in model.named_steps:
        vectorizer = model.named_steps["tfidf"]
    else:
        raise ValueError("‚ö†Ô∏è Le mod√®le charg√© n'est pas un pipeline valide ou ne contient pas 'tfidf'.")

    # V√©rifier que le mod√®le a bien `predict_proba()`
    if not hasattr(model.named_steps["classifier"], "predict_proba"):
        raise ValueError("‚ö†Ô∏è Le classifieur du mod√®le ne supporte pas `predict_proba()`.")

    print("‚úÖ Mod√®le et vectorizer charg√©s avec succ√®s !")

    # üîç Tester `predict_proba()` apr√®s chargement
    try:
        test_vect = vectorizer.transform(["test"])
        test_proba = model.named_steps["classifier"].predict_proba(test_vect)
        print(f"‚úÖ Test `predict_proba()` OK, sortie: {test_proba}")
    except Exception as e:
        raise ValueError(f"‚ùå ERREUR: `predict_proba()` ne fonctionne pas apr√®s chargement. D√©tails : {e}")

except Exception as e:
    print(f"‚ùå ERREUR: Probl√®me lors du chargement du mod√®le : {e}")
    exit(1)  # Arr√™ter Flask si le mod√®le ne peut pas √™tre charg√©

@app.route("/", methods=["GET"])
def home():
    return "üöÄ Serveur Flask en cours d'ex√©cution !"

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.get_json()

        # V√©rifier que 'nom_produit' est bien pr√©sent et valide
        if not data or "nom_produit" not in data:
            return jsonify({"error": "Le champ 'nom_produit' est requis."}), 400

        nom_produit = data.get("nom_produit")

        if not isinstance(nom_produit, str) or not nom_produit.strip():
            return jsonify({"error": "Le champ 'nom_produit' doit √™tre une cha√Æne de caract√®res non vide."}), 400

        # Nettoyer et transformer en minuscules
        nom_produit = nom_produit.strip().lower()

        # üîπ Transformer l'entr√©e avec le vectorizer
        try:
            nom_produit_vect = vectorizer.transform([nom_produit])
            print(f"‚úÖ Transformation r√©ussie, dimensions : {nom_produit_vect.shape}")
        except Exception as e:
            return jsonify({"error": "Erreur lors de la vectorisation du texte", "details": str(e)}), 500

        # üîÆ Faire la pr√©diction
        try:
            proba = model.named_steps["classifier"].predict_proba(nom_produit_vect)
            max_proba = np.max(proba)
            prediction = model.classes_[np.argmax(proba)]
            print(f"üîÆ Pr√©diction : {prediction} (Confiance: {max_proba:.2f})")

            # Si la confiance est inf√©rieure √† 0.5, renvoyer "Inconnue"
            if max_proba < 0.5:
                prediction = "Inconnue"
                print("‚ö†Ô∏è Confiance insuffisante (< 0.5), cat√©gorie fix√©e √† 'Inconnue'")
                
        except Exception as e:
            return jsonify({"error": "Erreur interne du mod√®le", "details": str(e)}), 500

        return jsonify({"categorie_predite": prediction, "confiance": round(max_proba, 2)})

    except Exception as e:
        return jsonify({"error": "Erreur interne du serveur", "details": str(e)}), 500

if __name__ == "__main__":
    app.run(host="127.0.0.1", port=5004, debug=True)
